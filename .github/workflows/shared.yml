name: shared

on:
  workflow_call:
    inputs:
      docker:
        description: 'Build and upload image to Docker Hub'
        type: boolean
        default: false
        required: false
      pace:
        description: 'Release pace'
        type: string
        default: 'edge'
        required: false
      upload:
        description: 'Upload binaries to GCP'
        type: boolean
        default: false
        required: false
    secrets:
      GCP_CREDENTIALS:
        required: false
      GCP_PROJECT:
        required: false

env:
  UPLOAD_BASE: bootstrap.urbit.org/vere-test
  VERE_PACE: ${{ inputs.pace }}
  VERSION_TYPE: ${{ (inputs.pace == 'soon' || inputs.pace == 'live') && 'real' || 'hash' }}

jobs:
  urbit:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: linux-arm64, runner: ubuntu-22.04 }
          - { target: linux-x86_64, runner: ubuntu-22.04 }
          - { target: macos-x86_64, runner: macos-12 }

    runs-on: ${{ matrix.runner }}

    steps:
      #
      # BUILD AND TEST
      #
      - uses: actions/checkout@v3

      - name: Set up build cache
        uses: actions/cache@v3
        with:
          key: ${{ matrix.target }}-cache
          path: |
            # It would be nice to cache the Bazel cache, but the total GitHub
            # cache size is 10GB per repository, and the musl libc toolchains
            # take much longer to build than anything in the Bazel cache, so we
            # only cache the musl libc toolchains.
            # # Cache bazel path on Linux.
            # ~/.cache/bazel/_bazel_runner
            # # Cache bazel path on macOS.
            # /private/var/tmp/_bazel_runner
            # Cache musl libc toolchains.
            /usr/local/*-musl
      
      - name: Build and test
        run: |
          # Build the binary.
          echo "${{ inputs.pace }}" > ./pkg/vere/PACE
          params=()
          case "${{ matrix.target }}" in
            "linux-arm64")
              bazel run //bazel/toolchain:aarch64-linux-musl-gcc
              params+=(
                --platforms=//:linux-arm64
              )
              ;;
            "linux-x86_64")
              bazel run //bazel/toolchain:x86_64-linux-musl-gcc
              ;;
            "macos-x86_64")
              # Switch Xcode path to match the path specified in our bazel toolchain.
              sudo xcode-select --switch /Library/Developer/CommandLineTools
              brew install automake libtool
              brew_clang="//bazel/toolchain:brew-clang-macos-x86_64-toolchain"
              params+=(
                --clang_version=14.0.6
                --extra_toolchains=$brew_clang
              )
              ;;
            *)
              echo "Unsupported target: ${{ matrix.target }}"
              exit 1
              ;;
          esac

          bazel build "${params[@]}" :urbit

          # Prepare binary for upload to GCP in future step.
          echo "$GITHUB_WORKSPACE/bazel-bin/pkg/vere/urbit"
          echo "urbit_static=$GITHUB_WORKSPACE/bazel-bin/pkg/vere/urbit" >> $GITHUB_ENV

          # We have no way of running the linux-arm64 tests on a linux-x86_64
          # machine.
          if [[ "${{ matrix.target }}" != "linux-arm64" ]]; then
            params+=(
              --build_tests_only
            )
            bazel test ... "${params[@]}"
          fi

          # Test the binary and run fakeship tests.
          # See https://github.com/urbit/vere/issues/15.
          # See https://github.com/urbit/vere/issues/40.
          if [[ "${{ matrix.target }}" == "linux-x86_64" ]]; then
            bazel build //pkg/vere:test-fake-ship
          fi
      
      #
      # UPLOAD TO GCP
      #
      - uses: google-github-actions/auth@v1
        if: inputs.upload
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        if: inputs.upload
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Upload binaries to bootstrap.urbit.org
        if: inputs.upload
        run: |
          if [ "real" == "$VERSION_TYPE" ]; then
            version="$(cat ./pkg/vere/VERSION)"
          else
            version="${GITHUB_SHA:0:9}"
          fi
          os=$(echo "${{ matrix.target }}" | cut -d'-' -f1)
          arch=$(echo "${{ matrix.target }}" | cut -d'-' -f2)
          system=${arch}-${os}
          target="gs://${UPLOAD_BASE}/${VERE_PACE}/${version}/vere-v${version}-${system}"

          gsutil cp -n "${{ env.urbit_static }}" "$target"
          exitcode=$?

          [ $exitcode -eq 0 ] &&
            echo "upload to $target complete." ||
            echo "upload to $target failed.";
          exit $exitcode

      #
      # DOCKER
      #
      - uses: docker/docker-login-action@v1.8.0
        if: inputs.docker
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: christian-korneck/update-container-description-action@v1
        if: inputs.docker
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          destination_container_repo: ${{ secrets.DOCKERHUB_USERNAME }}/urbit
          provider: dockerhub
          short_description: 'Urbit: a clean-slate OS and network for the 21st century'
          readme_file: 'DOCKER.md'

      - name: Build and push Docker image
        if: inputs.docker && matrix.target == 'linux-x86_64'
        run: |
          if [ "real" == "$VERSION_TYPE" ]; then
            version="$(cat ./pkg/vere/VERSION)"
          else
            version="${GITHUB_SHA:0:9}"
          fi
          bazel run :upload_docker --image_tag=v$version
          bazel run :upload_docker --image_tag=latest
